# Importa√ß√µes de bibliotecas padr√£o do Python
import os
import sys
import json
import shutil
import zipfile
import logging
import xml.etree.ElementTree as ET
import glob
from functools import wraps
import io
import secrets
from datetime import time as dt_time
import pytz
from pathlib import Path

# Importa√ß√µes de bibliotecas de terceiros (instaladas via pip)
import aiohttp
import openpyxl
from openpyxl import Workbook
import warnings
import simplekml
import aiomysql
import pandas as pd
import matplotlib.pyplot as plt
import contextily as cx
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler, JobQueue, TypeHandler)  # Componentes para construir o bot
from telegram.error import NetworkError
from Scripts_Alexo import selecionar_token, __version__
import asyncio
import aiofiles
from html import escape
from telegram.constants import ParseMode

caminho_env = Path(__file__).parent / ".env"

# Carrega as vari√°veis de ambiente do arquivo .env localizado no mesmo diret√≥rio do script
load_dotenv(dotenv_path=caminho_env)

warnings.filterwarnings("ignore", category=UserWarning)

class IgnoreAttributeErrorFilter(logging.Filter):
    # Este filtro impede que mensagens de log contendo "AttributeError" sejam exibidas.
    def filter(self, record):
        return "AttributeError" not in record.getMessage()

async def send_log_to_telegram(message: str):
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
    payload = {
        'chat_id': TELEGRAM_GROUP_ID,
        'text': f"[LOG] {message}", # 
        'parse_mode': 'Markdown'
    }
    try:
        timeout = aiohttp.ClientTimeout(total=5)
        
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(url, json=payload) as response:
                if response.status != 200:
                    print(f"LOGGING FALLBACK (API ERROR): Status {response.status} ao enviar log.")

    except (aiohttp.ClientError, asyncio.TimeoutError) as e:
        print(f"LOGGING FALLBACK (NETWORK ERROR): {e}")
    except Exception as e:
        print(f"LOGGING FALLBACK (UNEXPECTED ERROR): {e}")


logger = logging.getLogger()
logger.setLevel(logging.INFO)

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)
console_handler.addFilter(IgnoreAttributeErrorFilter())


logger.addHandler(console_handler)


# --- Metadados e Constantes Globais ---

# Define os metadados do script
__author__ = "Alexandre B, J. Ayrton"
__credits__ = "Anderson, Josimar"

FileName = "WebHook.json"
# Limita o traceback do Python para n√£o exibir rastreamentos detalhados de erro
sys.tracebacklimit = 0

DBUG = 2


# --- Inicializa√ß√£o do Token do Bot ---

# Seleciona o token do bot conforme o modo de debug
try:
    # Tenta obter o token do bot chamando a fun√ß√£o customizada 'selecionar_token'
    BOT_TOKEN = selecionar_token(DBUG)
except ValueError as e:
    logger.error(f"Erro: {e}")

# --- Constantes de Mensagens ---

# Define um 'set' com os valores v√°lidos para splitters.
SPLITTERS_VALIDOS = {"1/16", "1/8", "1/4"}

TELEGRAM_GROUP_ID = "-1002292627707" #GRUPO DE LOGS

# Mensagens de erro pr√©-definidas para serem usadas nas respostas do bot.
ErroE101 = "‚ùå Aten√ß√£o, excesso de argumentos. Verifique o comando informado e tente novamente!"
ErroP101 = "‚ùå Aten√ß√£o, 'POP' n√£o informado!"
ErroP102 = "‚ùå Aten√ß√£o, 'POP' n√£o existe na lista de templates. Verifique se foi informado corretamente ou notifique a equipe interna."
ErroF101 = "‚ùå Aten√ß√£o, 'FSAN/SN' n√£o informado para a consulta. Verifique o comando e tente novamente!"
ErroF102 = "‚ùå Aten√ß√£o, o formato do campo 'FSAN/SN' est√° incorreto!"
ErroS101 = "‚ùå Aten√ß√£o, 'SPLITTER' n√£o informado. Verifique o comando e tente novamente!"
ErroN101 = "‚ùå Aten√ß√£o, 'OLT/SLOT/PON' n√£o informado. Verifique o comando e tente novamente!"
ErroN102 = "‚ùå Aten√ß√£o, 'OLT/SLOT/PON' cont√©m mais de duas '/'. Verifique o comando e tente novamente!"
ErroC101 = "‚ùå Aten√ß√£o, verifique se a 'CTO' informada est√° correta e tente novamente."

# --- Manipulador de Erros ---

# Fun√ß√£o para lidar com todos os erros capturados pela biblioteca python-telegram-bot.
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    err = context.error
    
    # Verifica se o erro √© uma falha de conex√£o de rede com a API do Telegram.
    if isinstance(err, NetworkError):
        # Verifica se o bot j√° n√£o est√° marcado como desconectado para evitar notifica√ß√µes repetidas.
        if not context.bot_data.get('is_disconnected', False):
            # Registra um aviso sobre a perda de conex√£o.
            logger.warning("Conex√£o com o Telegram perdida. Marcando como desconectado.")
            context.bot_data['is_disconnected'] = True
            mensagem_para_admin = (f"üö® ALERTA DE CONEX√ÉO üö®\n\nO bot perdeu a conex√£o com o Telegram.\n\nErro: {err}")
            # Notifica os administradores sobre a queda.
            await notificar_admins(context, mensagem_para_admin)
        return
        
    # Para qualquer outro tipo de erro, registra a exce√ß√£o completa para depura√ß√£o.
    logger.error(f"Exce√ß√£o capturada pelo handler global: {err}", exc_info=True)
    mensagem_generica = f"Ocorreu uma exce√ß√£o n√£o tratada no bot: {err}"
    await notificar_admins(context, mensagem_generica)


# --- Verificador de Reconex√£o ---

async def check_reconnection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    is_disconnected_flag = context.bot_data.get('is_disconnected', False)
    
    # Se a flag estiver True, significa que o bot estava desconectado e agora recebeu uma atualiza√ß√£o.
    if is_disconnected_flag:
        logger.info("Conex√£o com o Telegram reestabelecida. Enviando notifica√ß√£o para admins.")
        
        # Reseta a flag para False, indicando que o bot est√° online.
        context.bot_data['is_disconnected'] = False 
        mensagem_online = "‚úÖ *CONEX√ÉO REESTABELECIDA* ‚úÖ\n\nO bot est√° online e operando normalmente."
        # Notifica os administradores que o bot est√° de volta.
        await notificar_admins(context, mensagem_online)

# Fun√ß√£o para centralizar e padronizar a cria√ß√£o de conex√µes com o banco de dados.
async def criar_conexao_db():
    """Cria e retorna uma conex√£o ass√≠ncrona com o banco de dados."""
    try:
        # Carrega as credenciais do banco de dados a partir de vari√°veis de ambiente.
        return await aiomysql.connect(
            host=os.getenv("DB_HOST"),
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASSWORD"),
            db=os.getenv("DB_DATABASE"),
            connect_timeout=5,
            autocommit=True # Autocommit para simplificar opera√ß√µes
        )
    except Exception as e:
        logger.error(f"Falha ao criar conex√£o com o DB: {e}")
        return None


# --- Sistema de Notifica√ß√£o de Administradores com Fallback ---

# Tarefa agendada para periodicamente salvar uma lista de admins em um arquivo JSON.
async def atualizar_admins_fallback(context: ContextTypes.DEFAULT_TYPE):
    logger.info("Executando tarefa agendada: Atualizando lista de administradores de fallback...")
    conexao_db = await criar_conexao_db()
    if not conexao_db:
        logger.error("Job 'atualizar_admins_fallback': N√£o foi poss√≠vel conectar ao DB.")
        return
    try:
        async with conexao_db.cursor(aiomysql.DictCursor) as cursor:
            # Query SQL para selecionar o ID do Telegram de todos os usu√°rios com o cargo 'Administrador'.
            query = "SELECT u.id_telegram FROM usuarios u JOIN cargos c ON u.cargo_id = c.id WHERE c.nome_cargo = 'Administrador'"
            await cursor.execute(query)
            admins = await cursor.fetchall()
            # Extrai apenas os IDs da lista de dicion√°rios.
            admin_ids = [admin['id_telegram'] for admin in admins]
        # Abre (ou cria) o arquivo 'admins_fallback.json' para escrita de forma ass√≠ncrona.
        async with aiofiles.open("admins_fallback.json", "w", encoding="utf-8") as f:
            # Salva a lista de IDs de admin no arquivo JSON.
            await f.write(json.dumps({"admin_ids": admin_ids}))
        logger.info(f"Lista de fallback de administradores atualizada com sucesso. {len(admin_ids)} admin(s) salvo(s).")
    except Exception as e:
        logger.error(f"Job 'atualizar_admins_fallback': Falha ao executar a tarefa. Erro: {e}")
    finally:
        if conexao_db:
            conexao_db.close()


# Fun√ß√£o principal para notificar administradores.
# A primeira tentativa √© sempre buscar a lista de admins direto do banco de dados.
async def notificar_admins(context: ContextTypes.DEFAULT_TYPE, mensagem_erro: str):
    """
    Busca a lista de administradores no DB e os notifica sobre um erro
    de forma segura, usando ParseMode.HTML.
    """
    conexao_db = None
    try:
        conexao_db = await criar_conexao_db()
        if not conexao_db:
            raise ConnectionError("Falha ao obter conex√£o com o DB para notifica√ß√£o.")
        async with conexao_db.cursor(aiomysql.DictCursor) as cursor:
            query = "SELECT u.id_telegram FROM usuarios u JOIN cargos c ON u.cargo_id = c.id WHERE c.nome_cargo = 'Administrador'"
            await cursor.execute(query)
            admins = await cursor.fetchall()

        if not admins:
            logger.warning("Nenhum administrador encontrado no banco de dados para notificar.")
            return
        erro_escapado = escape(str(mensagem_erro))
        mensagem_formatada = (
            f"<b>üö® ALERTA DE ERRO üö®</b>\n\n"
            f"Ocorreu a seguinte falha no bot:\n"
            f"<pre><code>{erro_escapado}</code></pre>"
        )
        tasks = [
            context.bot.send_message(
                chat_id=admin['id_telegram'],
                text=mensagem_formatada,
                parse_mode=ParseMode.HTML
            ) for admin in admins
        ]
        
        await asyncio.gather(*tasks)

    except Exception as db_err:
        logger.error(f"Falha ao notificar admins (DB), acionando fallback. Erro: {db_err}")
        await notificar_admins_fallback(context, mensagem_erro)
    finally:
        if conexao_db:
            conexao_db.close()

# Fun√ß√£o de notifica√ß√£o de fallback, usada quando o banco de dados est√° inacess√≠vel.
async def notificar_admins_fallback(context: ContextTypes.DEFAULT_TYPE, mensagem_erro: str):
    logger.warning("Acionando modo de notifica√ß√£o de fallback (lendo do arquivo JSON).")
    try:
        # Abre o arquivo JSON que cont√©m a lista de admins salva de forma ass√≠ncrona.
        async with aiofiles.open("admins_fallback.json", "r", encoding="utf-8") as f:
            dados = json.loads(await f.read())
            admin_ids = dados.get("admin_ids", [])
        # Se a lista de IDs estiver vazia, registra o erro e encerra.
        if not admin_ids:
            logger.error("O arquivo de fallback de administradores est√° vazio ou n√£o foi encontrado. Ningu√©m foi notificado.")
            return
        # Formata a mensagem para informar que √© uma notifica√ß√£o de fallback.
        mensagem_formatada = (
            f"üö® *ALERTA DE ERRO (Notifica√ß√£o de Fallback)* üö®\n\n"
            f"A notifica√ß√£o prim√°ria falhou. O erro original reportado foi:\n\n"
            f"```\n{mensagem_erro}\n```"
        )
        # Envia a mensagem para cada admin salvo no arquivo.
        tasks = [context.bot.send_message(chat_id=admin_id, text=mensagem_formatada, parse_mode='Markdown') for admin_id in admin_ids]
        await asyncio.gather(*tasks, return_exceptions=True)
    except FileNotFoundError:
        logger.error("Arquivo 'admins_fallback.json' n√£o encontrado. N√£o foi poss√≠vel executar a notifica√ß√£o de fallback.")
    except Exception as e:
        logger.error(f"Erro inesperado na fun√ß√£o de notifica√ß√£o de fallback: {e}")

# --- Decorator de Verifica√ß√£o de Permiss√£o ---

def check_permission(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user = update.effective_user
        chat = update.effective_chat
        
        if not user or not chat:
            logger.warning("Recebido um update sem usu√°rio ou chat efetivo. Ignorando verifica√ß√£o de permiss√£o.")
            return

        user_id = user.id
        command_name = func.__name__
        conexao_db = None
        
        try:
            conexao_db = await criar_conexao_db()
            if not conexao_db:
                raise ConnectionError("DB indispon√≠vel para checar permiss√£o.")
                
            async with conexao_db.cursor(aiomysql.DictCursor) as cursor:
                query = "SELECT 1 FROM usuarios u JOIN permissoes p ON u.cargo_id = p.cargo_id JOIN comandos cmd ON p.comando_id = cmd.id WHERE u.id_telegram = %s AND cmd.nome_comando = %s LIMIT 1;"
                await cursor.execute(query, (user_id, command_name))
                resultado = await cursor.fetchone()

            if resultado:
                await func(update, context, *args, **kwargs)
            else:
                await chat.send_message("‚ùå Voc√™ n√£o tem permiss√£o para usar este comando.")
                
        except Exception as err:
            error_message = f"Erro na verifica√ß√£o de permiss√£o para o comando /{command_name}: {err}"
            logger.error(error_message, exc_info=True)
            await notificar_admins(context, error_message)
            await chat.send_message("‚ö†Ô∏è Ocorreu um erro ao verificar suas permiss√µes. A equipe de administra√ß√£o foi notificada.")
            
        finally:
            if conexao_db:
                conexao_db.close()
                
    return wrapper


# --- Comandos ---

# O decorator @check_permission √© aplicado ao comando /cadastrar.
# Isso significa que a l√≥gica de 'check_permission' ser√° executada antes da l√≥gica de 'cadastrar'.
@check_permission
async def cadastrar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conexao_db = None
    try:
        conexao_db = await criar_conexao_db()
        if not conexao_db:
            raise ConnectionError("DB indispon√≠vel.")
        
        # Se o comando for executado sem argumentos (ex: /cadastrar), ele lista os cargos dispon√≠veis.
        if len(context.args) != 1:
            async with conexao_db.cursor(aiomysql.DictCursor) as cursor:
                await cursor.execute("SELECT nome_cargo FROM cargos ORDER BY nome_cargo;")
                resultados = await cursor.fetchall()
            lista_cargos = "\n".join([f"  - {item['nome_cargo']}" for item in resultados]) if resultados else "Nenhum cargo encontrado."
            mensagem_ajuda = f"Uso: `/cadastrar <CARGO>`\n\n*Cargos dispon√≠veis:*\n{lista_cargos}"
            await update.message.reply_text(mensagem_ajuda, parse_mode='Markdown')
            return

        # Se o comando tiver um argumento, inicia a gera√ß√£o do convite.
        cargo_solicitado = context.args[0].capitalize()
        async with conexao_db.cursor(aiomysql.DictCursor) as cursor:
            # Primeiro, verifica se o cargo solicitado existe no banco de dados.
            await cursor.execute("SELECT id FROM cargos WHERE nome_cargo = %s", (cargo_solicitado,))
            resultado_cargo = await cursor.fetchone()
            if not resultado_cargo:
                await update.message.reply_text(f"‚ùå Cargo '{cargo_solicitado}' inv√°lido. Verifique os cargos dispon√≠veis com /cadastrar.")
                return

            cargo_id = resultado_cargo['id']
            # Gera um token aleat√≥rio e seguro para ser o c√≥digo do convite. E Insere na tabela de 'cadastros_pendentes'.
            hash_convite = secrets.token_hex(16)
            query_insert_invite = "INSERT INTO cadastros_pendentes (hash_convite, cargo_id, admin_id) VALUES (%s, %s, %s)"
            await cursor.execute(query_insert_invite, (hash_convite, cargo_id, user.id))
            bot_info = await context.bot.get_me()
            bot_username = bot_info.username
            cargo = escape(str(cargo_solicitado))

        mensagem = (
            f"‚úÖ Convite de cadastro gerado com sucesso!\n\n"
            f"<b>Cargo:</b> {cargo}\n\n"
            f"Pe√ßa para o novo usu√°rio contatar o bot @{bot_username} e enviar o seguinte comando:\n\n"
            f"(Clique no texto abaixo para copiar üëá)\n"
            f"<code>/novo_usuario {hash_convite}</code>")
        
        await update.message.reply_text(mensagem, parse_mode=ParseMode.HTML)
        logger.info(f"Admin {user.id} gerou um convite para o cargo {cargo_solicitado} (ID: {cargo_id})")

    except Exception as e:
        await update.message.reply_text("Ocorreu um erro ao processar o cadastro.")
        logger.error(f"Erro no comando /cadastrar: {e}", exc_info=True)
    finally:
        if conexao_db:
            conexao_db.close()

# --- Fluxo de Conversa para Cadastro de Novo Usu√°rio ---

# Define os "estados" da conversa.
VERIFICAR_HASH, RECEBER_MATRICULA, RECEBER_NOME = range(3)

# Fun√ß√£o de entrada da conversa, acionada pelo comando /novo_usuario <hash>.
async def novo_usuario(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not context.args or len(context.args) != 1:
        await update.message.reply_text("Uso: /novo_usuario <c√≥digo_de_convite>")
        return ConversationHandler.END # Encerra a conversa se o uso for incorreto.
    
    hash_convite = context.args[0]
    conexao_db = None
    try:
        conexao_db = await criar_conexao_db()
        if not conexao_db: raise ConnectionError("DB indispon√≠vel")
        
        async with conexao_db.cursor(aiomysql.DictCursor) as cursor:
            query = "SELECT cp.cargo_id, c.nome_cargo FROM cadastros_pendentes cp JOIN cargos c ON cp.cargo_id = c.id WHERE cp.hash_convite = %s"
            await cursor.execute(query, (hash_convite,))
            resultado = await cursor.fetchone()
        
        if not resultado:
            user = update.effective_user
            username_text = f"@{user.username}" if user.username else "N√£o definido"
            
            mensagem_para_admins = (
                f"üö® *Tentativa de Cadastro com Convite Inv√°lido*\n\n"
                f"O usu√°rio abaixo tentou se cadastrar com um c√≥digo inv√°lido ou j√° utilizado:\n\n"
                f"üë§ *Nome:* {user.full_name}\n"
                f"üÜî *ID do Telegram:* `{user.id}`\n"
                f"üîó *Username:* {username_text}\n\n"
                f"O c√≥digo informado foi:\n`{hash_convite}`"
            )

            await notificar_admins(context, mensagem_para_admins)
            
            await update.message.reply_text("‚ùå C√≥digo de convite inv√°lido ou j√° utilizado.")
            return ConversationHandler.END

        context.user_data['cadastro_cargo_id'] = resultado['cargo_id']
        context.user_data['cadastro_cargo_nome'] = resultado['nome_cargo']
        context.user_data['cadastro_hash'] = hash_convite
        
        await update.message.reply_text(f"‚úÖ Convite v√°lido para o cargo de *{resultado['nome_cargo']}*! Por favor, informe sua matr√≠cula:", parse_mode='Markdown')
        return RECEBER_MATRICULA
        
    except Exception as e:
        logger.error(f"Erro em /novo_usuario: {e}", exc_info=True)
        await update.message.reply_text("Ocorreu um erro ao verificar o convite.")
        return ConversationHandler.END
    finally:
        if conexao_db: conexao_db.close()

async def receber_matricula(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update.message or update.edited_message
    if not message:
        return ConversationHandler.END
    matricula = message.text
    # Armazena a matr√≠cula recebida.
    context.user_data['cadastro_matricula'] = matricula
    logger.info(f"Usu√°rio {update.effective_user.id} informou a matr√≠cula: {matricula}")
    
    await update.message.reply_text("Obrigado! Agora, por favor, informe seu nome completo:")
    return RECEBER_NOME

async def receber_nome(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update.message or update.edited_message
    if not message:
        return ConversationHandler.END
    user = update.effective_user
    nome_completo = message.text
    
    # Recupera os dados da conversa armazenados em user_data.
    cargo_id = context.user_data.get('cadastro_cargo_id')
    cargo_nome = context.user_data.get('cadastro_cargo_nome')
    hash_convite = context.user_data.get('cadastro_hash')
    matricula = context.user_data.get('cadastro_matricula')
    conexao_db = None
    try:
        conexao_db = await criar_conexao_db()
        if not conexao_db:
            await update.message.reply_text("‚ö†Ô∏è Erro de conex√£o com o banco de dados para finalizar.")
            return ConversationHandler.END

        async with conexao_db.cursor(aiomysql.DictCursor) as cursor:
            # Query para inserir um novo usu√°rio ou atualizar um existente caso a id do telegram seja igual.
            query_insert_update = """
                INSERT INTO usuarios (id_telegram, nome_usuario, matricula, nome_completo, cargo_id, hash_convite)
                VALUES (%s, %s, %s, %s, %s, %s)
                AS new
                ON DUPLICATE KEY UPDATE 
                    nome_usuario = new.nome_usuario, 
                    matricula = new.matricula, 
                    nome_completo = new.nome_completo, 
                    cargo_id = new.cargo_id,
                    hash_convite = new.hash_convite
            """
            
            await cursor.execute(query_insert_update, (user.id, user.full_name, matricula, nome_completo, cargo_id, hash_convite))
            
            # Deleta o convite para invalid√°-lo.
            await cursor.execute("DELETE FROM cadastros_pendentes WHERE hash_convite = %s", (hash_convite,))
        
        await update.message.reply_text(f"‚úÖ Cadastro conclu√≠do com sucesso! Bem-vindo(a), {nome_completo}!")
        logger.info(f"Novo usu√°rio cadastrado/atualizado: {user.id}, Nome: {nome_completo}, Matr√≠cula: {matricula}, Cargo: {cargo_nome}")
        return ConversationHandler.END

    except aiomysql.IntegrityError:
        await update.message.reply_text("‚ùå Falha no cadastro. A matr√≠cula informada j√° est√° em uso por outro usu√°rio.")
        return ConversationHandler.END
    except Exception as err:
        logger.error(f"Erro de DB na finaliza√ß√£o do cadastro: {err}", exc_info=True)
        error_message = f"Erro ao finalizar o cadastro do usu√°rio {user.id}: {err}"
        await notificar_admins(context, error_message)
        await update.message.reply_text("‚ö†Ô∏è Ocorreu um erro ao finalizar seu cadastro. A equipe de administra√ß√£o foi notificada.")
        return ConversationHandler.END
    finally:
        if conexao_db:
            conexao_db.close()
        # Limpa todos os dados tempor√°rios da conversa, independentemente do resultado.
        for key in ['cadastro_cargo_id', 'cadastro_cargo_nome', 'cadastro_hash', 'cadastro_matricula']:
            context.user_data.pop(key, None)

# Fun√ß√£o para ser usada como um 'handler' de cancelamento dentro de um ConversationHandler.
async def cancelar_cadastro(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # Percorre uma lista de chaves e remove cada uma do 'user_data'.
    for key in ['cadastro_cargo_id', 'cadastro_cargo_nome', 'cadastro_hash', 'cadastro_matricula']:
        context.user_data.pop(key, None) # O 'None' evita erros se a chave n√£o existir.
    # Envia uma mensagem de confirma√ß√£o para o usu√°rio.
    await update.message.reply_text("Cadastro cancelado.")
    return ConversationHandler.END

# --- Fun√ß√µes de Apoio e Comandos ---

# Comando para listar os administradores do grupo, protegido pelo decorator de permiss√£o.
@check_permission
async def listar_admins(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Pega o ID do chat onde o comando foi executado.
    chat_id = update.effective_chat.id
    try:
        administradores = await context.bot.get_chat_administrators(chat_id)
        if not administradores:
            await update.message.reply_text("N√£o foi poss√≠vel encontrar administradores neste grupo.")
            return
        # Monta uma lista de texto formatada com os nomes e IDs dos administradores.
        lista_texto = ["*Administradores do Grupo*:\n"]
        for admin in administradores:
            user = admin.user
            lista_texto.append(f"- *{user.full_name}* (ID: `{user.id}`)")
        mensagem = "\n".join(lista_texto)
        await update.message.reply_text(mensagem, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Erro ao listar administradores: {e}")
        await update.message.reply_text("Ocorreu um erro ao buscar a lista de administradores. Verifique se o bot tem permiss√£o para isso.")



# --- Fun√ß√µes de Geolocaliza√ß√£o e Mapa ---

# Fun√ß√£o para buscar CTOs (Caixas de Termina√ß√£o √ìptica) em um raio de uma dada coordenada.
async def buscar_ctos_proximas(lat, lon):
    conexao_db = None
    try:
        # Define o raio de busca em quil√¥metros.
        raio_km = 0.15
        # Query SQL que utiliza a f√≥rmula de Haversine para calcular a dist√¢ncia
        # entre a coordenada fornecida e cada CTO no banco de dados.
        # 6371 √© o raio aproximado da Terra em km.
        query_haversine = """
            SELECT cto, latitude, longitude,
                   (6371 * ACOS(
                       COS(RADIANS(%s)) * COS(RADIANS(latitude)) *
                       COS(RADIANS(longitude) - RADIANS(%s)) +
                       SIN(RADIANS(%s)) * SIN(RADIANS(latitude))
                   )) AS distancia
            FROM ctos
            HAVING distancia <= %s
            ORDER BY distancia;
        """
        conexao_db = await criar_conexao_db()
        if not conexao_db:
            logger.error("N√£o foi poss√≠vel conectar ao DB para buscar CTOs.")
            return None
        async with conexao_db.cursor(aiomysql.DictCursor) as cursor:
            # Executa a query passando a latitude, longitude e o raio como par√¢metros.
            await cursor.execute(query_haversine, (lat, lon, lat, raio_km))
            ctos_encontradas = await cursor.fetchall()
        return ctos_encontradas
    except Exception as err:
        logger.error(f"Erro de SQL ao buscar CTOs pr√≥ximas: {err}")
        return None # Retorna None se ocorrer um erro de SQL.
    finally:
        # Garante que a conex√£o seja fechada.
        if conexao_db:
            conexao_db.close()


# Fun√ß√£o para gerar uma imagem de mapa com a localiza√ß√£o do usu√°rio e as CTOs pr√≥ximas.

def criar_mapa_ctos(user_lat, user_lon, ctos_encontradas):
    # Cria DataFrames com os dados das CTOs e do usu√°rio para facilitar a manipula√ß√£o.
    df_ctos = pd.DataFrame(ctos_encontradas)
    df_user = pd.DataFrame([{'latitude': user_lat, 'longitude': user_lon}])
    # Combina todos os pontos para calcular a √°rea total que o mapa deve cobrir.
    all_points = pd.concat([df_ctos[['latitude', 'longitude']], df_user[['latitude', 'longitude']]])
    # Garante que as coordenadas sejam num√©ricas, descartando valores inv√°lidos.
    all_points['latitude'] = pd.to_numeric(all_points['latitude'], errors='coerce')
    all_points['longitude'] = pd.to_numeric(all_points['longitude'], errors='coerce')
    all_points.dropna(inplace=True)
    # Calcula os limites do mapa (zoom) com uma margem para que os pontos n√£o fiquem na borda.
    lat_range = all_points.latitude.max() - all_points.latitude.min()
    lon_range = all_points.longitude.max() - all_points.longitude.min()
    padding_percentage = 0.10
    lat_buffer = max(lat_range * padding_percentage, 0.002) # Margem m√≠nima.
    lon_buffer = max(lon_range * padding_percentage, 0.002)
    min_lat, max_lat = all_points.latitude.min() - lat_buffer, all_points.latitude.max() + lat_buffer
    min_lon, max_lon = all_points.longitude.min() - lon_buffer, all_points.longitude.max() + lon_buffer
    # --- Cria√ß√£o do Gr√°fico (Mapa) ---
    fig, ax = plt.subplots(figsize=(8, 8))
    ax.set_axis_off()
    ax.set_xlim(min_lon, max_lon)
    ax.set_ylim(min_lat, max_lat)
    # Plota as CTOs e a localiza√ß√£o do usu√°rio.
    ax.scatter(df_ctos.longitude, df_ctos.latitude, c='red', s=60, zorder=2, label='CTOs Pr√≥ximas', edgecolors='black')
    for _, row in df_ctos.iterrows():
        ax.text(row.longitude, row.latitude + (lat_buffer * 0.04), f'{row.cto}', fontsize=10, zorder=3, ha='center', fontweight='bold')
    ax.scatter(user_lon, user_lat, c='blue', s=250, marker='o', zorder=4, label='Sua Localiza√ß√£o', edgecolors='white')
    # Adiciona um mapa base ao fundo do gr√°fico.
    cx.add_basemap(ax, crs='EPSG:4326', source=cx.providers.OpenStreetMap.Mapnik)
    # Salva a imagem em mem√≥ria.
    buf = io.BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight', pad_inches=0)
    plt.close(fig)
    buf.seek(0)
    return buf

async def criar_mapa_ctos(user_lat, user_lon, ctos_encontradas):
    return await asyncio.to_thread(criar_mapa_ctos, user_lat, user_lon, ctos_encontradas)

# --- Comando para Solicitar Localiza√ß√£o ---

# Comando /ctos
@check_permission
async def ctos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Solicita ao usu√°rio que envie sua localiza√ß√£o e define uma "flag"
    # indicando que o bot est√° aguardando uma mensagem de localiza√ß√£o para buscar CTOs.
    context.user_data['waiting_for_ctos_location'] = True
    await update.message.reply_text("üìç Por favor, envie sua localiza√ß√£o para que eu possa encontrar as CTOs mais pr√≥ximas.")


# --- Manipulador de Localiza√ß√£o Unificado ---

# Este handler recebe TODAS as mensagens de localiza√ß√£o e decide o que fazer com base nas flags definidas em 'user_data'.
async def unified_location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location = update.message.location
    latitude, longitude = location.latitude, location.longitude
    user = update.effective_user

    # Rota 1: Se a flag 'waiting_for_ctos_location' existir...
    if context.user_data.pop('waiting_for_ctos_location', False):
        await update.message.reply_text("Buscando CTOs em um raio de 150 metros... üì°")
        ctos_encontradas = await buscar_ctos_proximas(latitude, longitude)
        
        # Trata os diferentes resultados poss√≠veis da busca.
        if ctos_encontradas is None:
            await update.message.reply_text("‚ùå Ocorreu um erro ao acessar o banco de dados.")
        elif not ctos_encontradas:
            await update.message.reply_text("Nenhuma CTO foi encontrada no raio de 150 metros.")
        else:
            try:
                # Gera a imagem do mapa e formata a legenda.
                mapa_buffer = await criar_mapa_ctos(latitude, longitude, ctos_encontradas)
                if mapa_buffer:
                    linhas_ctos = [f"- {cto['cto']} - [Rota](https://maps.google.com/?q={cto['latitude']},{cto['longitude']})" for cto in ctos_encontradas]
                    nomes_ctos_com_link = "\n".join(linhas_ctos)
                    # Envia o mapa com a legenda formatada.
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=mapa_buffer,
                        caption=f"‚úÖ Encontrei {len(ctos_encontradas)} CTO(s) pr√≥ximas:\n{nomes_ctos_com_link}",
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text("‚ùå Erro ao gerar o buffer do mapa.")
            except Exception as e:
                logger.error(f"Falha ao gerar o mapa para /ctos: {e}", exc_info=True)
                await update.message.reply_text("‚ùå Ocorreu um erro ao gerar o mapa.")
        return

    # Rota 2: Se a flag for 'waiting_for_location' (usada por /novaCTO)...
    elif context.user_data.pop('waiting_for_location', False):
        await update.message.reply_text(f"üìç Localiza√ß√£o para /novaCTO recebida: {latitude}, {longitude}\nEnviando para o template...")
        # Recupera outras informa√ß√µes salvas.
        pop = context.user_data.pop('pop', None)
        olt_slot_pon = context.user_data.pop('olt_slot_pon', None)
        splitter = context.user_data.pop('splitter', None)

        if not all([pop, olt_slot_pon, splitter]):
            await update.message.reply_text("‚ùå Faltam informa√ß√µes para criar a CTO. Tente o comando /novaCTO novamente.")
            return
        
        webhook_link = await buscar_webhook_por_pop(pop)
        if not webhook_link:
            await update.message.reply_text(ErroP102)
            return

        # Prepara o payload para ser enviado ao sistema externo via webhook.
        olt, slot, pon = olt_slot_pon.split("/")
        payload = {"comando": "NovaCto", "olt": olt, "slot": slot, "pon": pon, "latitude": latitude, "longitude": longitude, "splitter": splitter, "id": update.effective_chat.id}
        data = await fetch_data(webhook_link, payload)
        await update.message.reply_text(data.get("mensagem", "Ocorreu um erro na resposta do servidor."))
        return
    
    # Rota 3 (Padr√£o): Se a localiza√ß√£o for enviada sem um contexto espec√≠fico.
    else:
        logger.info(f"Localiza√ß√£o avulsa recebida de {user.full_name}")
        accuracy = f"Precis√£o: {location.horizontal_accuracy:.0f} metros" if location.horizontal_accuracy else ""
        mensagem = (f"üìç **Informa√ß√µes da Localiza√ß√£o**\n\n"
                    f"Latitude: `{latitude}`\nLongitude: `{longitude}`\n{accuracy}\n\n"
                    f"[Abrir no Google Maps](https://maps.google.com/?q={latitude},{longitude})")
        await update.message.reply_text(mensagem, parse_mode='Markdown')


# --- Configura√ß√£o de Logging para o Telegram ---

class TelegramHandler(logging.Handler):
    def emit(self, record):
        log_entry = self.format(record)
        try:
            loop = asyncio.get_running_loop()
            if loop.is_running():
                loop.create_task(send_log_to_telegram(log_entry))
        except RuntimeError:
            print(f"LOG_FALLBACK (no loop): {log_entry}")
            pass

telegram_handler = TelegramHandler()
telegram_handler.setLevel(logging.INFO)
telegram_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
telegram_handler.setFormatter(telegram_formatter)
logger.addHandler(telegram_handler)

# Reduz o "ru√≠do" de log de bibliotecas.
logging.getLogger("aiohttp").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

# --- Fun√ß√µes Utilit√°rias para Manipula√ß√£o de Arquivos ---

# NOVO: Fun√ß√£o auxiliar para executar c√≥digo bloqueante de forma ass√≠ncrona.
async def _run_blocking_io(func, *args, **kwargs):
    """Fun√ß√£o auxiliar para executar c√≥digo bloqueante em uma thread."""
    return await asyncio.to_thread(func, *args, **kwargs)

# Fun√ß√£o para excluir arquivos com base em um padr√£o de nome.
async def ExcluirArquivos(caminho_arquivo):
    pasta, nome_base_ext = os.path.split(caminho_arquivo)
    nome_base, ext = os.path.splitext(nome_base_ext)
    arquivos_encontrados = glob.glob(os.path.join(pasta, f"{nome_base}*{ext}"))
    if arquivos_encontrados:
        for arquivo in arquivos_encontrados:
            try:
                await _run_blocking_io(os.remove, arquivo)
                print(f"‚úÖ Arquivo exclu√≠do: {arquivo}")
            except Exception as e:
                print(f"‚ùå Erro ao excluir '{arquivo}': {e}")
    else:
        logger.info(f"Erro ao excluir um arquivo - ‚ö†Ô∏è Nenhuma vers√£o do arquivo encontrada para exclus√£o: {caminho_arquivo}")


# Fun√ß√£o para limpar o diret√≥rio raiz de arquivos com extens√µes espec√≠ficas.
async def ExcluirArquivosporExtensao():
    diretorio = Path("")
    extensoes = [".xlsx", ".kml", ".kmz"]
    for arquivo in diretorio.iterdir():
        if arquivo.suffix in extensoes:
            await _run_blocking_io(arquivo.unlink)
            logger.info(f"Ajuste do diret√≥rio raiz - Exclu√≠do: {arquivo}")


# Fun√ß√£o para converter um arquivo KML (XML para dados geogr√°ficos) em um arquivo XLSX (Excel).
def kml_to_xlsx(kml_file, xlsx_file):
    """L√≥gica s√≠ncrona para converter KML para XLSX."""
    tree = ET.parse(kml_file)
    root = tree.getroot()
    namespaces = {'kml': 'http://www.opengis.net/kml/2.2'}
    wb = Workbook()
    ws = wb.active
    ws.title = "Placemarks"
    ws.append(["PLACEMARK", "LATITUDE", "LONGITUDE"])
    for placemark in root.findall(".//kml:Placemark", namespaces):
        name_node = placemark.find("kml:name", namespaces)
        coord_node = placemark.find(".//kml:coordinates", namespaces)
        if name_node is not None and coord_node is not None and name_node.text and coord_node.text:
            coord_text = coord_node.text.strip()
            coord_parts = coord_text.split(",")
            if len(coord_parts) >= 2:
                lon, lat = coord_parts[0], coord_parts[1]
                ws.append([name_node.text.strip(), lat.strip(), lon.strip()])
    wb.save(xlsx_file)


# --- Fun√ß√µes de Busca em Arquivos JSON ---

# Fun√ß√£o para listar cidades a partir de um arquivo JSON de configura√ß√£o.
async def ListaCidades():
    try:
        async with aiofiles.open(FileName, 'r', encoding='utf-8') as f:
            dados = json.loads(await f.read())
        return "\n".join([f"{i+1}. {c.get('POP', '')} - {c.get('CIDADE', '')}" for i, c in enumerate(dados)])
    except (FileNotFoundError, json.JSONDecodeError):
        logger.error(f"Erro ao ler o arquivo de cidades: {FileName}")
        return "Arquivo de cidades n√£o encontrado ou corrompido."


# Busca o link do webhook associado a um POP espec√≠fico. Compara o POP de forma insens√≠vel a mai√∫sculas/min√∫sculas.
async def buscar_webhook_por_pop(pop: str) -> str | None:
    try:
        async with aiofiles.open(FileName, 'r', encoding='utf-8') as f:
            dados = json.loads(await f.read())
        for entry in dados:
            if entry.get("POP", "").upper() == pop.upper():
                return entry.get("WEBHOOK_LINK")
        return None
    except (FileNotFoundError, json.JSONDecodeError):
        logger.error(f"Erro ao ler o arquivo de webhook: {FileName}")
        return None


# Busca o nome da cidade associada a um POP espec√≠fico.
async def buscar_cidade_por_pop(pop: str) -> str | None:
    try:
        async with aiofiles.open(FileName, 'r', encoding='utf-8') as f:
            dados = json.loads(await f.read())
        for entry in dados:
            if entry.get("POP", "").upper() == pop.upper():
                return entry.get("CIDADE")
        return None
    except (FileNotFoundError, json.JSONDecodeError):
        logger.error(f"Erro ao buscar cidade por POP: {FileName}")
        return None


# Busca a configura√ß√£o de um diret√≥rio em um arquivo JSON espec√≠fico.
async def buscar_dir_drive():
    try:
        async with aiofiles.open("config_drive.json", "r", encoding="utf-8") as f:
            dados = json.loads(await f.read())
            return dados.get("diretorio", "‚ùå Diret√≥rio n√£o encontrado no arquivo.")
    except FileNotFoundError:
        return "‚ùå Arquivo de configura√ß√£o n√£o encontrado."

# --- Fun√ß√µes de Manipula√ß√£o de Arquivos para o Drive ---

# Fun√ß√£o para mover um arquivo para um diret√≥rio, com versionamento autom√°tico.
def EnviaArquivosDrive(dirarquivo, xlsx_file):
    if not os.path.exists(dirarquivo):
        os.makedirs(dirarquivo)

    nome_base, ext = os.path.splitext(os.path.basename(xlsx_file))
    caminho_destino = os.path.join(dirarquivo, os.path.basename(xlsx_file))
    contador = 1
    while os.path.exists(caminho_destino):
        contador += 1
        novo_nome = f"{nome_base}_v{contador}{ext}"
        caminho_destino = os.path.join(dirarquivo, novo_nome)
    
    if os.path.exists(xlsx_file):
        shutil.move(xlsx_file, caminho_destino)


# Encontra o primeiro arquivo .kml ou .kmz em um dado diret√≥rio.
def encontrar_arquivo_kml_kmz(DirArquivo):
    if not os.path.exists(DirArquivo):
        logger.info(f"Encontrar arquivo - ‚ùå Diret√≥rio n√£o encontrado: {DirArquivo}")
        return None

    # Itera sobre os arquivos no diret√≥rio.
    for arquivo in os.listdir(DirArquivo):
        if arquivo.endswith((".kml", ".kmz")):
            return os.path.join(DirArquivo, arquivo) 
    return None # Retorna None se nenhum arquivo for encontrado.

# Fun√ß√£o para extrair o arquivo .kml de dentro de um arquivo .kmz.
def extract_kml_from_kmz(kmz_file, extract_to):
    with zipfile.ZipFile(kmz_file, 'r') as kmz:
        for file in kmz.namelist():
            if file.endswith('.kml'):
                kmz.extract(file, extract_to)
                kml_file = os.path.join(extract_to, file)
                new_kml_file = os.path.join(extract_to, os.path.splitext(os.path.basename(kmz_file))[0] + '.kml')
                os.rename(kml_file, new_kml_file)
                return new_kml_file
    return None


# Converte uma planilha (XLSX) para um arquivo KML.
def converter_planilha(CaminhoXLSX, CaminhoKML, NomePlanilha, IconeUrl):
    workbook = openpyxl.load_workbook(CaminhoXLSX)
    if NomePlanilha not in workbook.sheetnames:
        raise FileNotFoundError(f"Planilha '{NomePlanilha}' n√£o encontrada em {CaminhoXLSX}")
    
    sheet = workbook[NomePlanilha]
    kml = simplekml.Kml()

    for row in sheet.iter_rows(min_row=3, values_only=True):
        nome, lat, lon = row[0], row[1], row[2]
        if nome and lat and lon:
            pnt = kml.newpoint(name=str(nome), coords=[(lon, lat)])
            pnt.style.iconstyle.icon.href = IconeUrl
            pnt.style.iconstyle.scale = 1.5
    
    kml.save(CaminhoKML)
    workbook.close()


# Fun√ß√£o para copiar dados de uma planilha de origem para uma planilha de destino (template).
def DE_KMZ_BASE_PARA_TEMPLATE(arquivo_origem, arquivo_destino):
    try:
        wb_origem = openpyxl.load_workbook(arquivo_origem)
        sheet_origem = wb_origem.active
        wb_destino = openpyxl.load_workbook(arquivo_destino)
        if "KMZ" not in wb_destino.sheetnames:
            sheet_destino = wb_destino.create_sheet("KMZ")
        else:
            sheet_destino = wb_destino["KMZ"]
        for row_idx, row in enumerate(sheet_origem.iter_rows(min_row=3, values_only=True), start=3):
            sheet_destino[f"A{row_idx}"] = row[0]
            sheet_destino[f"B{row_idx}"] = row[1]
            sheet_destino[f"C{row_idx}"] = row[2]
        wb_destino.save(arquivo_destino)
        print("‚úÖ Dados copiados com sucesso para a planilha 'KMZ'!")

    except Exception as e:
        logger.error(f"‚ùå Erro ao copiar os dados: {e}")


# Verifica a exist√™ncia de um arquivo de template baseado no POP e em uma conven√ß√£o de nome.
async def VerificarTemplatemporPOP(DirTemplate, PopInformado_user, update):
    if os.path.exists(DirTemplate):
        for arquivo in os.listdir(DirTemplate):
            if arquivo.startswith("TEMPLATE REDES") and arquivo.endswith(".gsheet"):
                partes = arquivo.replace(".gsheet", "").split()
                if len(partes) >= 3:
                    pop_do_arquivo = partes[2]
                    
                    if pop_do_arquivo == PopInformado_user:
                        caminho_arquivo = os.path.join(DirTemplate, arquivo)
                        logger.info(f"handle_mensagem - POP: {pop_do_arquivo} - Arquivo encontrado: {caminho_arquivo}")
                    else:
                        logger.info(f"handle_mensagem - POP: {pop_do_arquivo} n√£o corresponde ao esperado.")
    else:
        await update.message.reply_text(
            f"Erro ao acessar o template no diret√≥rio do drive.\n\n"
            f"| Informa√ß√µes recebidas:\nCaminho recebido do Template:\n{DirTemplate}"
        )


# Handler para o comando /ajuda.
async def ajuda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    comandos = [
        "| Ajuda - BOT-ALEXO",
        "\n\n- Atividades üåü",
        "    /Atividades <POP>",
        "    Verifica se existem atividades pendentes no template.",
        "    EX: /Atividades TIE",

        "\n\n- Checar üîç",
        "    /Checar <CTO> <FSAN>",
        "    Verifica OLT/SLOT/PON do cliente na CTO.",
        "    EX: /Checar TIE-001 FHTT0000000",

        "\n\n- Localizar üìç",
        "    /Localizar <CTO>",
        "    Retorna a localiza√ß√£o de uma CTO.",
        "    EX: /Localizar TIE-001",

        "\n\n- Input üìù",
        "    /Input <CTO> <SPLITER>",
        "    Inputa as informa√ß√µes de data e splitter para o template.",
        "    EX: /Input TIE-001 1/16",

        "\n\n- Insert üìù",
        "    /Insert <CTO> <OLT/SLOT/PON>",
        "    Inputa as informa√ß√µes da CTO e splitter para o template na aba checar.",
        "    EX: /Insert TIE-001 1/1/1",

        "\n\n- Listar IDS üìã",
        "    /ListarIDs <POP> <OLT/SLOT/PON>",
        "    /TESTE", 
        "    EX: /Input TIE-001 1/16", 

        "\n\n- Nova CTO ‚ûï",
        "    /NovaCTO <POP> <OLT/SLOT/PON> <SPLITER>",
        "    CTO QUE N√ÉO EXISTE NO KMZ.",
        "    EX: /NovaCTO TIE 1/1/1 1/16",

        "\n\n| Informa√ß√µes ‚ÑπÔ∏è:",
        f"    Vers√£o: {__version__}",
        f"    Criadores: {__author__}",
        f"    Cr√©ditos:   {__credits__}"
    ]

    comandos_texto = "\n".join(comandos)
    logger.info(f"/Ajuda - Usu√°rio:{user.first_name} {user.last_name}, Grupo:{update.effective_chat.title}")
    await context.bot.send_message(chat_id=update.effective_chat.id, text=comandos_texto)

# --- Fun√ß√£o de Comunica√ß√£o com Webhook ---

# Fun√ß√£o para enviar dados para um webhook e receber a resposta.
async def fetch_data(webhook_link, payload):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(webhook_link, json=payload) as response:
                response_data = await response.json()

                if response.status == 200:
                    logger.info(f"Google App Script - Resposta: {response_data}")
                    return response_data
                else:
                    logger.error(f"Erro ao conectar ao Apps Script: {response.status} - {response.reason}")
                    return {
                        "status": "error",
                        "message": f"Erro ao conectar ao servidor: {response.reason}."
                    }

    except aiohttp.ClientError as client_error:
        logger.error(f"Erro de cliente HTTP: {client_error}")
        return {"status": "error", "message": "Erro de comunica√ß√£o com o servidor."}

    except Exception as e:
        logger.error(f"/fetch_data - Exce√ß√£o inesperada: {e}")
        return {"status": "error", "message": f"Erro inesperado: {str(e)}"}


# --- Handlers de Comando ---

# Comando /atividades.
@check_permission
async def atividades(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Valida se o argumento <POP> foi informado.
    if len(context.args) < 1:
        await update.message.reply_text(text=ErroP101)
        return
    pop = context.args[0].upper().split('-')[0]
    
    # Busca o link do webhook correspondente ao POP.
    webhook_link = await buscar_webhook_por_pop(pop)
    if webhook_link is None:
        await update.message.reply_text(ErroP102)
        return

    # Monta o payload para a requisi√ß√£o.
    payload = {"comando": "Atividades", "id": update.effective_chat.id}
    logger.info(f"RECEBIDO: /Atividades - POP:{pop} - Usu√°rio:{update.effective_user.first_name}")

    try:
        # Envia a requisi√ß√£o para o webhook.
        data = await fetch_data(webhook_link, payload)
    except Exception as e:
        logger.error(f"Erro ao buscar dados: {e}")
        await update.message.reply_text(text="‚ö†Ô∏è Erro ao processar a solicita√ß√£o.")
        return
    
    # Processa a resposta do webhook.
    if data.get("status") == "sucesso":
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"{data.get('mensagem')}")
        logger.info(f"Atividade: {data.get('mensagem')}")
    else:
        # Caso o status n√£o seja "sucesso", exibe uma mensagem de erro detalhada.
        ErroWH104 = (
            "WH104.\n\n| VERIFICAR SE A SIGLA DO POP FOI INFORMADO CORRETAMENTE!"
            "\n\nCaso persistir, informar o erro √† equipe interna com urg√™ncia!"
            "\n\nCONTATOS:\n    - @J_Ayrton\n    - @AlexandreBarros_Desktop"
        )
        error_message = data.get("mensagem", ErroWH104)
        logger.error(f"ERRO WH104: COMANDO /Atividades - POP:{pop} - Usu√°rio:{update.effective_user.first_name}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ö†Ô∏è Erro 1: {error_message}")

    return webhook_link


# Comando /checar.
@check_permission
async def checar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Valida a quantidade de argumentos recebidos.
    if len(context.args) < 2:
        await update.message.reply_text(text=ErroF101 if len(context.args) < 2 else ErroP101)
        return

    cto, fsan = context.args[:2]
    cto = str(cto.upper())
    pop = cto.split('-')[0]

    # Valida√ß√µes de formato para os argumentos.
    if cto.count('-') != 1:
        await update.message.reply_text(text=ErroC101)
        return
    if '/' in fsan or '-' in fsan:
        await update.message.reply_text(text=ErroF102)
        return

    # Busca o webhook e, se n√£o encontrar, envia erro.
    webhook_link = await buscar_webhook_por_pop(pop)
    if webhook_link is None:
        await update.message.reply_text(ErroP102)
        return

    payload = {"comando": "Checar", "cto": cto, "fsan": fsan}
    logger.info(f"/Checar recebido - CTO: {cto}, FSAN: {fsan} - Usu√°rio:{update.effective_user.first_name}")
    
    # Envia os dados e processa a resposta.
    data = await fetch_data(webhook_link, payload)
    if data.get("status") == "sucesso":
        await update.message.reply_text(text=f"{data.get('confirmacao')}")
    else:
        await update.message.reply_text(text=f" 6: {data.get('mensagem')}")
    return webhook_link


# Comando /localizar.
@check_permission
async def localizar_cto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 1:
        await update.message.reply_text(text=ErroP101)
        return

    cto = context.args[0].upper()

    if cto.count('-') != 1:
        await update.message.reply_text(text=ErroC101)
        return

    pop = cto.split('-')[0]
    webhook_link = await buscar_webhook_por_pop(pop)
    if webhook_link is None:
        await update.message.reply_text(ErroP102)
        return

    payload = {"comando": "Localizar", "cto": cto}
    logger.info(f"/Localizar recebido - POP: {pop}, CTO: {cto} - Usu√°rio:{update.effective_user.first_name}")
    data = await fetch_data(webhook_link, payload)

    if data.get("status") == "sucesso":
        await update.message.reply_text(text=f"{data.get('mensagem')}")
    else:
        await update.message.reply_text(text="‚ö†Ô∏è CTO N√ÉO ENCONTRADO!")


# Comando /Exibircidade.
@check_permission
async def ExibirCidade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cidade = ListaCidades()
    await update.message.reply_text(text=f"üåÜ Cidades dispon√≠veis:\n\n{cidade}")
    logger.info(f"/ExibirCidade recebido - Usu√°rio:{update.effective_user.first_name}")
    

# Comando /input
@check_permission
async def input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text(text=ErroS101 if len(context.args) > 0 else ErroP101)
        return

    cto, splitter = context.args[:2]
    
    # Valida√ß√µes de formato para CTO e splitter.
    if cto.count('-') != 1:
        await update.message.reply_text(text=ErroC101)
        return
    if splitter.count('/') != 1:
        await update.message.reply_text(text=ErroN102)
        return

    cto = cto.upper()
    pop = cto.split('-')[0]
    webhook_link = await buscar_webhook_por_pop(pop)
    if webhook_link is None:
        await update.message.reply_text(ErroP102)
        return

    # Valida√ß√£o espec√≠fica para o valor do splitter.
    splitters_validos = {"16", "8", "4"}
    splitter_final = splitter.split("/")[-1]
    if splitter_final not in splitters_validos:
        await update.message.reply_text(text="‚ùå SPLITTER inv√°lido! Use apenas 1/16, 1/8, 1/4.")
        return

    payload = {"comando": "Input", "cto": cto, "splitter": splitter_final}
    logger.info(f"/Input recebido - POP: {pop}, CTO: {cto} - Usu√°rio:{update.effective_user.first_name}")
    
    try:
        data = await fetch_data(webhook_link, payload)
        if data.get("status") == "sucesso":
            await update.message.reply_text(text=f"{data.get('confirmacao')}")
        else:
            await update.message.reply_text(text=f" ‚ö†Ô∏è Erro 5: {data.get('mensagem')}")
    except Exception as e:
        logger.error(f"/Input recebido - POP: {pop}, CTO: {cto}, {e} - Usu√°rio:{update.effective_user.first_name}")
        await update.message.reply_text(text="‚ö†Ô∏è Erro interno ao processar sua solicita√ß√£o. Tente novamente mais tarde.")
        return    

# --- Comandos Administrativos e de Informa√ß√£o ---

# Comando de ajuda administrativa.
@check_permission
async def AjudaAdm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    chat_title = update.effective_chat.title or "Chat Privado"
    
    # Monta uma √∫nica string de texto com todos os comandos administrativos e suas descri√ß√µes.
    comandos = (
        "| AjudaAdm:"
        "\n\n>>> Principais comandos"
        "\n\n - EXIBIR O ID DO GRUPO:"
        "\n   /id"
        "\n\n- EXIBIR CIDADES SALVAS:"
        "\n   /ExibirCidade"
        "\n\n- EXCLUIR TEMPLATE EXISTENTE:"
        "\n   /ExcluirTemplate <cidade>"
        "\n\n- ADICIONAR NOVO TEMPLATE:"
        "\n   /AddTemplate <cidade> <POP> <WebHook>" 
        "\n\n- Compartilhar Webhook.json:"
        "\n   /CWH"
        "\n\n- Converter Arquivo KMZ ou KML em arquivo .XLSX:"
        "\n   /Convert"
        "\n   Fluxo do comando:"
        "\n       0. Finalizar o comando /Convert"
        "\n       1. Enviar o arquivo KMZ ou KML para o Driver:"
        "\n           - Informar o pop da cidade que deseja salvar o arquivo"
        "\n       2. Insertar os points no template e salvar os arquivos"
        "\n           - Informar o pop da cidade que deseja salvar o arquivo"
        "\n\n- Baixar KMZ da pasta 'kmz e kml' no drive:"
        "\n   /BaixarKMZ <POP>"
        "\n\n- Gerar KML BASE a partir do template:"
        "\n   /GerarKMZ <POP>"
        "\n\n>>> Pastas compartilhadas"
        "\n\n- Grupo de logger:"
        "\n   https://t.me/+Ij5OdRrCgAVkNTIx"
        "\n\n- One Driver Backup:"
        "\n   https://1drv.ms/f/s!AltzaXN7TtjqkqR0OQJ0jYa9VSyhWg?e=bb1LEy"
        "\n\n| *Quando o nome da cidade conter 'espa√ßo' lembre-se de substituir por h√≠fen '-'."
    )

    await context.bot.send_message(chat_id=chat_id, text=comandos)
    logger.info(f"/ajudaadm - Usu√°rio:{user.first_name}, Grupo:{chat_title}")
    
# Comando /CWH (Compartilhar WebHook).
@check_permission
async def CWH(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    chat_title = update.effective_chat.title or "Chat Privado"
    logger.info(f"/CWH - Usu√°rio:{user.first_name}, Grupo:{chat_title}")
    try:
        # Abre o arquivo de forma ass√≠ncrona para leitura em bytes ('rb')
        async with aiofiles.open('WebHook.json', 'rb') as f:
            await context.bot.send_document(chat_id=chat_id, document=f)
    except FileNotFoundError:
        await update.message.reply_text("‚ùå Arquivo 'WebHook.json' n√£o encontrado.")
    except Exception as e:
        logger.error(f"Erro ao enviar WebHook.json: {e}")
        await update.message.reply_text("‚ùå Ocorreu um erro ao enviar o arquivo.")

    
# Comando para Adicionar um novo template ao arquivo de configura√ß√£o WebHook.json.
@check_permission
async def AdicionarTemplate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if len(context.args) < 3:
        await update.message.reply_text(
            text=("‚ùå Formato inv√°lido!\n\n"
                  "Use: /AdicionarTemplate <CIDADE> <POP> <WEBHOOK>\n\n"
                  "Exemplo:\n/AdicionarTemplate Rio_Claro RCA https://script.google.com/macros...")
        )
        return

    CIDADE_ID, POP, WEBHOOK_LINK = context.args[:3]
    CIDADE_ID = CIDADE_ID.upper().replace("-", "_") # Padroniza o nome da cidade
    POP = POP.upper()
    
    novo_dado = {'CIDADE': CIDADE_ID, 'POP': POP, 'WEBHOOK_LINK': WEBHOOK_LINK}
    
    try:
        dados_existentes = []
        if await _run_blocking_io(os.path.exists, FileName):
            async with aiofiles.open(FileName, 'r', encoding='utf-8') as f:
                try:
                    dados_existentes = json.loads(await f.read())
                except json.JSONDecodeError:
                    pass # Arquivo existe mas est√° vazio ou corrompido

        dados_existentes.append(novo_dado)
        
        async with aiofiles.open(FileName, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(dados_existentes, ensure_ascii=False, indent=4))

        cidades = await ListaCidades() # Await na chamada da fun√ß√£o async
        await update.message.reply_text(text=f"‚úÖ Novo template adicionado:\n\n- CIDADE: {CIDADE_ID}\n- POP: {POP}\n- WEBHOOK: {WEBHOOK_LINK}")
        await update.message.reply_text(text=f"Lista de cidades existentes:\n\n{cidades}")
        logger.info(f"/AdicionarTemplate - CIDADE:{CIDADE_ID}, POP:{POP} - Usu√°rio:{user.first_name}")

    except Exception as e:
        logger.error(f"Erro em /AdicionarTemplate: {e}")
        await update.message.reply_text("‚ùå Ocorreu um erro ao adicionar o template.")

# Comando para excluir um template do arquivo de configura√ß√£o.
@check_permission
async def ExcluirTemplate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 1:
        await update.message.reply_text(text="‚ùå Formato inv√°lido!\n\nUse: /ExcluirTemplate <POP>")
        return

    pop_a_excluir = context.args[0].upper()
    logger.info(f"/ExcluirTemplate - POP para excluir: {pop_a_excluir} - Usu√°rio: {update.effective_user.first_name}")

    try:
        if not await _run_blocking_io(os.path.exists, FileName):
            await update.message.reply_text("‚ùå Arquivo de configura√ß√£o 'WebHook.json' n√£o encontrado.")
            return

        async with aiofiles.open(FileName, 'r', encoding='utf-8') as f:
            content = await f.read()
            dados = json.loads(content) if content else []

        dados_atualizados = [item for item in dados if item.get('POP') != pop_a_excluir]

        # Verifica se algum item foi removido comparando o tamanho das listas.
        if len(dados) == len(dados_atualizados):
            await update.message.reply_text(text=f"‚ö†Ô∏è O POP '{pop_a_excluir}' n√£o foi encontrado na lista.")
        else:
            async with aiofiles.open(FileName, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(dados_atualizados, indent=4, ensure_ascii=False))
            
            await update.message.reply_text(text=f"‚úÖ O POP '{pop_a_excluir}' foi exclu√≠do com sucesso!")
            cidades = await ListaCidades() # Await na chamada da fun√ß√£o async
            await update.message.reply_text(text=f"Lista de cidades existentes:\n\n{cidades}")
            
    except (FileNotFoundError, json.JSONDecodeError):
        await update.message.reply_text("‚ùå Arquivo de configura√ß√£o 'WebHook.json' n√£o encontrado ou corrompido.")
    except Exception as e:
        logger.error(f"Erro inesperado ao excluir template: {e}", exc_info=True)
        await update.message.reply_text("‚ùå Ocorreu um erro interno ao tentar excluir o template.")


# Comando p√∫blico /id.
async def id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Obt√©m informa√ß√µes de IDs do chat e do usu√°rio.
    chat_id = update.effective_chat.id
    chat_title = update.effective_chat.title
    user_id = update.effective_user.id
    
    logger.info(f"/id - Usu√°rio:{update.effective_user.first_name}, Grupo:{chat_title}")
    # Envia uma mensagem com as informa√ß√µes coletadas.
    await update.message.reply_text(f"\nA ID deste grupo √©: {chat_id}, "
                                      f"\nNome do grupo: {chat_title},"
                                      f"\nID do Usuario: {user_id}")

# Comando p√∫blico /info.
async def Info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    Inf = (
        "| Nome do BOT: Alexo"
        "\n\n - Alexo tem o intuito de ser um aux√≠lio para os usu√°rios t√©cnicos, back-offices e internos, com a capacidade de gerar de editar plalhas inopputando informa√ß√µes direto do chat, assim reduzindo as margens se erros na inputa√ß√£o de diversos procedimentos por todas as equipes."
        f"\n\nVers√£o: {__version__}"
        f"\n\nCriador: {__author__}"
        f"\nCr√©ditos: {__credits__}"
    )
    logger.info(f"/Info - Usu√°rio:{update.effective_user.first_name}, Grupo:{update.effective_chat.title}")
    await update.message.reply_text(Inf)

# --- Handlers de Comando Adicionais ---

# Comando /listarIDs.
@check_permission
async def listarIDs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Valida se os argumentos <POP> e <OLT/SLOT/PON> foram fornecidos.
    if len(context.args) < 2:
        await update.message.reply_text(text=ErroS101 if len(context.args) > 0 else ErroP101)
        return
    
    pop, OLT_SLOT_PON = context.args[:2]
    pop = pop.upper().split('-')[0]
    if OLT_SLOT_PON.count('/') != 2:
        await update.message.reply_text(text=ErroN102)
        return

    # Extrai os componentes olt, slot e pon.
    olt, slot, pon = OLT_SLOT_PON.split("/")
    payload = {"comando": "ListarIds", "olt": olt, "slot": slot, "pon": pon}
    logger.info(f"/ListarIDs - OLT:{olt}, SLOT:{slot}, PON:{pon} - Usu√°rio:{update.effective_user.first_name}")

    webhook_link = await buscar_webhook_por_pop(pop) # CORRIGIDO: Adicionado await
    if webhook_link is None:
        await update.message.reply_text(ErroP102)
        return
    
    data = await fetch_data(webhook_link, payload)

    if data.get("status") == "sucesso":
        ctos = data.get('mensagem', []) # Garante que 'ctos' seja uma lista, mesmo se a chave n√£o existir.
        ctos_com_contador = [f"{i+1}. {cto}" for i, cto in enumerate(ctos)]
        ctos_com_contador_str = '\n'.join(ctos_com_contador)
        await update.message.reply_text(text=f"IDs disponiveis:\n\n{ctos_com_contador_str}\n\n| Sempre use o Id da CTO de n√∫mero [1]")
    else:
        await update.message.reply_text(text=f"‚ö†Ô∏è Erro 4: {data.get('mensagem')}")

# Comando /insert.
@check_permission
async def insert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text(text=ErroN101 if len(context.args) > 0 else ErroP101)
        return
    
    CTO, OLT_SLOT_PON = context.args[:2]
    CTO = str(CTO.upper())
    POP = CTO.split('-')[0]

    if CTO.count('-') != 1:
        await update.message.reply_text(text=ErroC101)
        return
    if OLT_SLOT_PON.count('/') != 2:
        await update.message.reply_text(text=ErroN102)
        return
    
    olt, slot, pon = OLT_SLOT_PON.split("/")
    payload = {"comando": "Insert", "cto": CTO, "olt": olt, "slot": slot, "pon": pon}
    logger.info(f"/Insert - CTO:{CTO}, PON:{OLT_SLOT_PON} - Usu√°rio:{update.effective_user.first_name}")

    webhook_link = await buscar_webhook_por_pop(POP) # CORRIGIDO: Adicionado await
    
    if webhook_link is None:
        await update.message.reply_text(ErroP102)
        return
    
    data = await fetch_data(webhook_link, payload)
    
    if data.get("status") == "sucesso":
        await update.message.reply_text(text=f"{data.get('mensagem')}")
    else:
        await update.message.reply_text(text=f"‚ö†Ô∏è Erro 3: {data.get('mensagem')}")

# Comando /novaCTO.
@check_permission
async def novaCTO(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Valida√ß√£o robusta para garantir que todos os 3 argumentos foram fornecidos.
    if len(context.args) < 3:
        await update.message.reply_text(text=ErroS101 if len(context.args) > 1 else ErroN101 if len(context.args) > 0 else ErroP101)
        return
    
    pop, olt_slot_pon, splitter = context.args
    pop = pop.split('-')[0]

    if olt_slot_pon.count('/') != 2 or splitter.count('/') != 1:
        await update.message.reply_text(text=ErroN102)
        return

    # Valida√ß√£o espec√≠fica para o valor do splitter.
    splitters_validos = {"16", "8", "4"}
    splitter_final = splitter.split("/")[-1]
    if splitter_final not in splitters_validos:
        await update.message.reply_text(text="‚ùå SPLITTER inv√°lido! Use apenas 1/16, 1/8, 1/4.")
        return
        
    await update.message.reply_text(text="üìç Por favor, envie a localiza√ß√£o da CTO que deseja adicionar.")

    # Armazena os dados j√° coletados e define uma flag de estado em 'user_data'.
    context.user_data['waiting_for_location'] = True
    context.user_data['pop'] = pop
    context.user_data['olt_slot_pon'] = olt_slot_pon
    context.user_data['splitter'] = splitter_final
    logger.info(f"/NovaCTO - POP:{pop}, PON:{olt_slot_pon}, SPL:{splitter} - Usu√°rio:{update.effective_user.full_name}")

# Comando /convert.
@check_permission
async def convert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Define a flag de estado para indicar que o bot est√° aguardando um arquivo.
    context.user_data['waiting_for_file'] = True
    await update.message.reply_text("Por favor, envie o arquivo KML/KMZ que voc√™ deseja converter.")


# --- Handler de Arquivo ---

# Handler para processar documentos recebidos.
async def handle_arquivo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('waiting_for_file'):
        return

    if not (update.message and update.message.document):
        await update.message.reply_text("‚ùå N√£o foi poss√≠vel identificar o arquivo. Por favor, envie um arquivo v√°lido.")
        return

    context.user_data.pop('waiting_for_file', None)
    document = update.message.document
    file_name = document.file_name
    
    await update.message.reply_text(f"üì• Recebendo arquivo '{file_name}'... Por favor, aguarde.")

    try:
        file = await context.bot.get_file(document.file_id)
        # file.download_to_drive √© s√≠ncrono, precisa ser executado em uma thread.
        await _run_blocking_io(file.download_to_drive, f"{file_name}")
        logger.info(f"Arquivo Recebido - Arquivo:{file_name} - Usu√°rio:{update.effective_user.first_name}")

        xlsx_file = None
        if file_name.endswith('.kml'):
            xlsx_file = file_name.replace('.kml', '.xlsx')
            await _run_blocking_io(kml_to_xlsx, file_name, xlsx_file)
        elif file_name.endswith('.kmz'):
            kml_file = await _run_blocking_io(extract_kml_from_kmz, file_name, "")
            if kml_file:
                xlsx_file = kml_file.replace('.kml', '.xlsx')
                await _run_blocking_io(kml_to_xlsx, kml_file, xlsx_file)
            else:
                await update.message.reply_text("‚ùå N√£o foi poss√≠vel extrair o arquivo KML do KMZ.")
                return
        else:
            await update.message.reply_text(f"‚ùå O arquivo '{file_name}' n√£o √© um KML ou KMZ v√°lido.")
            return

        if xlsx_file and await _run_blocking_io(os.path.exists, xlsx_file):
            await update.message.reply_text(f"‚úÖ Arquivo convertido para '{xlsx_file}' com sucesso!")
            async with aiofiles.open(xlsx_file, 'rb') as f:
                await context.bot.send_document(chat_id=update.effective_chat.id, document=f)
            
            await update.message.reply_text("Digite uma op√ß√£o:\n\n[0] - Sair\n\n[1] - Salvar no drive\n[2] - Salvar no drive e inputar no template")
            context.user_data['MsgUser_ApplyPointTemplates'] = True
            context.user_data['xlsx_file'] = xlsx_file
    except Exception as e:
        logger.error(f"Erro em handle_arquivo: {e}", exc_info=True)
        await update.message.reply_text("‚ùå Ocorreu um erro ao processar o arquivo.")

# --- Comandos de Configura√ß√£o e Manipula√ß√£o de Arquivos do Drive ---

# Comando /configdrive.
@check_permission
async def configdrive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå Voc√™ precisa informar um diret√≥rio! Exemplo: /configdrive nome_da_pasta")
        return

    DirDrive = context.args[0]
    dados = {"diretorio": DirDrive}

    try:
        async with aiofiles.open("config_drive.json", "w", encoding="utf-8") as f:
            await f.write(json.dumps(dados, ensure_ascii=False, indent=4))
        await update.message.reply_text(f"‚úÖ Diret√≥rio salvo: {DirDrive}")
    except Exception as e:
        logger.error(f"Erro ao salvar config_drive.json: {e}")
        await update.message.reply_text("‚ùå Ocorreu um erro ao salvar a configura√ß√£o.")


# Comando /baixarkmz 
async def baixarkmz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå Voc√™ precisa informar um POP v√°lido!")
        return
        
    pop = context.args[0].upper().split('-')[0]
    
    try:
        NomeCidade = await buscar_cidade_por_pop(pop)
        if not NomeCidade:
            await update.message.reply_text(f"‚ùå Cidade para o POP '{pop}' n√£o encontrada.")
            return

        LinkDrive = await buscar_dir_drive()
        if "‚ùå" in LinkDrive:
            await update.message.reply_text(LinkDrive)
            return
            
        Pastakmz = f"{NomeCidade.replace('-', ' ')}/kmz e kml"
        dirarquivo = os.path.join(LinkDrive, Pastakmz)

        arquivo_path = await _run_blocking_io(encontrar_arquivo_kml_kmz, dirarquivo)
        
        if arquivo_path:
            await update.message.reply_text(f"Enviando arquivo: {os.path.basename(arquivo_path)}")
            async with aiofiles.open(arquivo_path, "rb") as f:
                await update.message.reply_document(document=f)
        else:
            await update.message.reply_text(f"‚ùå Nenhum arquivo KML/KMZ encontrado no diret√≥rio: {dirarquivo}")
    except Exception as e:
        logger.error(f"Erro no comando /baixarkmz: {e}", exc_info=True)
        await update.message.reply_text("Ocorreu um erro ao buscar o arquivo.")


# Handler para gerar um KML "base" a partir de dados de uma planilha de template.
async def gerarkmzatualizado(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not context.args:
        await update.message.reply_text("‚ùå Voc√™ precisa informar um POP v√°lido!")
        return

    POP_ConvertKML = context.args[0].upper().split('-')[0]
    
    try:
        NomeCidade_ConvertKML = await buscar_cidade_por_pop(POP_ConvertKML)
        if not NomeCidade_ConvertKML:
            await update.message.reply_text(f"‚ùå N√£o foi poss√≠vel encontrar a cidade para o POP: {POP_ConvertKML}")
            return
        
        LinkDrive = await buscar_dir_drive()
        if "‚ùå" in LinkDrive:
            await update.message.reply_text(LinkDrive)
            return

        # ATEN√á√ÉO: O caminho para o template pode precisar de ajuste. Assumindo .xlsx
        CaminhoXLSX = os.path.join(LinkDrive, NomeCidade_ConvertKML.replace("-", " "), "CEP CTO", f"TEMPLATE REDES {POP_ConvertKML}.xlsx") 
        NomePlanilha = "KMZ"
        IconeUrl = "http://maps.google.com/mapfiles/kml/shapes/placemark_circle.png"
        CaminhoKML = f"{POP_ConvertKML} - {NomeCidade_ConvertKML} - KMZ BASE.kml"
        
        if not await _run_blocking_io(os.path.exists, CaminhoXLSX):
             await update.message.reply_text(f"‚ùå Arquivo de template n√£o encontrado em: {CaminhoXLSX}")
             return

        await context.bot.send_message(chat_id, "Gerando KML, aguarde...")
        await _run_blocking_io(converter_planilha, CaminhoXLSX, CaminhoKML, NomePlanilha, IconeUrl)
        
        async with aiofiles.open(CaminhoKML, "rb") as f:
            await context.bot.send_document(
                chat_id=chat_id,
                document=f,
                caption=f"Arquivo KML gerado com sucesso:\n   {os.path.basename(CaminhoKML)}"
            )
    except Exception as e:
        logger.error(f"Erro em /gerarkmzatualizado: {e}", exc_info=True)
        await update.message.reply_text("Ocorreu um erro ao gerar o arquivo KML.")


# --- Handler de Mensagem de Texto para Fluxos de Conversa ---

# Este handler atua como uma "m√°quina de estados" para gerenciar o fluxo ap√≥s a convers√£o de um arquivo.
async def handle_mensagem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    message = update.message or update.edited_message
    mensagem = message.text

    # ESTADO 1: O bot est√° esperando uma op√ß√£o (0, 1 ou 2) ap√≥s converter um arquivo.
    if context.user_data.get('MsgUser_ApplyPointTemplates'):
        if mensagem == "1":
            context.user_data['selected_flow'] = 1
            await context.bot.send_message(chat_id, "üìå Fluxo [1] selecionado!\n\nPor favor, informe o POP para continuar.")
        elif mensagem == "2":
            context.user_data['selected_flow'] = 2
            await context.bot.send_message(chat_id, "üìå Fluxo [2] selecionado!\n\nPor favor, informe o POP para continuar.")
        else:
            await message.reply_text("Comando 'convert' finalizado.")
            context.user_data.clear()
            return
        context.user_data.pop('MsgUser_ApplyPointTemplates')
        context.user_data['waiting_for_pop'] = True
        return

    # ESTADO 2: O bot est√° esperando um POP
    if context.user_data.get('waiting_for_pop'):
        pop_informado = mensagem.upper()
        flow = context.user_data.get('selected_flow')
        
        NomeCidade = await buscar_cidade_por_pop(pop_informado)
        if not NomeCidade:
            await message.reply_text("‚ùå POP n√£o encontrado! Tente novamente ou digite 0 para sair.")
            return

        LinkDrive = await buscar_dir_drive()
        if "‚ùå" in LinkDrive:
            await message.reply_text(LinkDrive)
            context.user_data.clear()
            return
        
        xlsx_file = context.user_data.get('xlsx_file')
        caminho_aux = os.path.join(LinkDrive, NomeCidade.replace("-", " "), "ARQUIVOS AUXILIARES")
        
        # Executa o fluxo de salvar o arquivo convertido
        await _run_blocking_io(EnviaArquivosDrive, caminho_aux, xlsx_file)
        await message.reply_text(f"‚úÖ Arquivo '{xlsx_file}' salvo na pasta de arquivos auxiliares.")

        if flow == 2:
            # L√≥gica para inputar no template
            await message.reply_text("‚öôÔ∏è L√≥gica para inputar os pontos no template ainda a ser implementada.")
            # ... aqui entraria a l√≥gica de DE_KMZ_BASE_PARA_TEMPLATE, que tamb√©m precisa ser n√£o-bloqueante
        
        context.user_data.clear()
        await ExcluirArquivosporExtensao()

    # ESTADO 2 / FLUXO 1: O bot est√° esperando um POP para o fluxo 1.
    if context.user_data.get('waiting_for_pop_1'):
        NomeCidade = await buscar_cidade_por_pop(mensagem)
        if NomeCidade:
            caminho_do_arquivo = os.path.join(buscar_dir_drive(), NomeCidade.replace("-", " "), "ARQUIVOS AUXILIARES")
            # Recupera o nome do arquivo .xlsx que foi gerado e salvo no user_data.
            xlsx_file = context.user_data.get('xlsx_file')
            await EnviaArquivosDrive(caminho_do_arquivo, xlsx_file, chat_id, context)
            context.user_data.clear() # Limpa todos os dados da conversa.
            ExcluirArquivosporExtensao() # Exclui arquivos tempor√°rios locais.
        else:
            await update.message.reply_text("‚ùå POP n√£o encontrado! Tente novamente ou digite 0 para sair.")
            
    # ESTADO 3 / FLUXO 2: O bot est√° esperando um POP para o fluxo 2.
    if context.user_data.get('waiting_for_pop_2'):
        PopInformado_user = mensagem.upper()
        NomeCidade = await buscar_cidade_por_pop(PopInformado_user)
        if NomeCidade:
            caminho_do_arquivo_aux = os.path.join(buscar_dir_drive(), NomeCidade.replace("-", " "), "ARQUIVOS AUXILIARES")
            DirTemplate = os.path.join(buscar_dir_drive(), NomeCidade.replace("-", " "), "CEP CTO")
            xlsx_file = context.user_data.get('xlsx_file')

            # Verifica se o arquivo de template existe no diret√≥rio.
            await VerificarTemplatemporPOP(DirTemplate, PopInformado_user, update)
            await EnviaArquivosDrive(caminho_do_arquivo_aux, xlsx_file, chat_id, context)

            ExcluirArquivosporExtensao()
            context.user_data.clear() # Limpa os dados da conversa ao finalizar.
        else:
            await update.message.reply_text("‚ùå POP n√£o encontrado na lista de templates! O processo foi encerrado.")
            context.user_data.clear()
            ExcluirArquivosporExtensao()

# --- Fun√ß√£o Principal de Execu√ß√£o do Bot ---

def main() -> None:
    """
    Fun√ß√£o principal que constr√≥i, configura e executa o bot do Telegram.
    """
    try:
        app = ApplicationBuilder().token(BOT_TOKEN).connect_timeout(10).read_timeout(10).job_queue(JobQueue()).build()
        
        # --- Registro de Handlers ---

        # Handler de Erro.
        app.add_error_handler(error_handler)

        # Handler de Reconex√£o:
        app.add_handler(TypeHandler(Update, check_reconnection), group=-1)

        # Handler de Conversa.
        conv_handler_novo_usuario = ConversationHandler(
            entry_points=[CommandHandler("novo_usuario", novo_usuario)],
            states={
                RECEBER_MATRICULA: [MessageHandler(filters.TEXT & ~filters.COMMAND, receber_matricula)],
                RECEBER_NOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receber_nome)],
            },
            fallbacks=[CommandHandler("cancelar", cancelar_cadastro)],
            per_message=False
        )
        app.add_handler(conv_handler_novo_usuario)

        # 4. Mapa de Comandos.
        app.add_handler(CommandHandler("start", ajuda))
        app.add_handler(CommandHandler("ajuda", ajuda))
        app.add_handler(CommandHandler("cadastrar", cadastrar))
        app.add_handler(CommandHandler("ctos", ctos))
        app.add_handler(CommandHandler("novaCTO", novaCTO))
        app.add_handler(CommandHandler("atividades", atividades))
        app.add_handler(CommandHandler("checar", checar))
        app.add_handler(CommandHandler("localizar", localizar_cto))
        app.add_handler(CommandHandler("ExibirCidade", ExibirCidade))
        app.add_handler(CommandHandler("input", input))
        app.add_handler(CommandHandler("insert", insert))
        app.add_handler(CommandHandler("listarIDs", listarIDs))
        app.add_handler(CommandHandler("convert", convert))
        app.add_handler(CommandHandler("gerarkmzatualizado", gerarkmzatualizado))
        app.add_handler(CommandHandler("baixarkmz", baixarkmz))
        app.add_handler(CommandHandler("Id", id))
        # Comandos de administra√ß√£o
        app.add_handler(CommandHandler("AjudaAdm", AjudaAdm))
        app.add_handler(CommandHandler("CWH", CWH))
        app.add_handler(CommandHandler("AdcionarTemplate", AdicionarTemplate))
        app.add_handler(CommandHandler("ExcluirTemplate", ExcluirTemplate))
        app.add_handler(CommandHandler("configdrive", configdrive))
        app.add_handler(CommandHandler("listar_admins", listar_admins))
        app.add_handler(CommandHandler("Info", Info))

        # 5. Handlers de Mensagem.
        # Handler para qualquer mensagem de localiza√ß√£o.
        app.add_handler(MessageHandler(filters.LOCATION, unified_location_handler))
        # Handler para qualquer tipo de documento enviado.
        app.add_handler(MessageHandler(filters.Document.ALL, handle_arquivo))
        # Handler para qualquer mensagem de texto que N√ÉO seja um comando.
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_mensagem))
        # Handler que escuta por edi√ß√µes de mensagens de texto e envia para a mesma fun√ß√£o 'handle_mensagem'.
        app.add_handler(MessageHandler(filters.Update.EDITED_MESSAGE, handle_mensagem))


        # --- Agendamento de Tarefas ---
        fuso_horario_sp = pytz.timezone('America/Sao_Paulo')
        horario = dt_time(hour=3, minute=0, second=0, tzinfo=fuso_horario_sp)
        
        logger.info(f"Agendando tarefa di√°ria para as {horario.strftime('%H:%M:%S %Z')}")
        # Agenda a fun√ß√£o 'atualizar_admins_fallback' para rodar diariamente no hor√°rio definido.
        app.job_queue.run_daily(
            atualizar_admins_fallback, 
            time=horario, 
            name="Atualiza√ß√£o lista Admins"
        )
        
        logger.info("Automa√ß√£o est√° rodando...")
        app.run_polling()

    except Exception as e:
        logger.critical(f"Erro fatal ao iniciar ou executar o bot: {e}", exc_info=True)


if __name__ == "__main__":
    main()